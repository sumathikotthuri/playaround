Download git from https://git-scm.com/

Git configurations can be set in three levels
--local
--global
--system

--local is the most narrow level, -- system is the most broader level configuration
Narrower level configurations always takes the precedence.

when configuration are done with no level then by default --local is applied by git, in this case configurations are stored prject specific in .git/config file
When configurations are done using -- global, configurations are stored for all projects to one user in ~/.gitconfig
When configurations are done using --system, configurations are stored for all projects for all users in /etc/gitconfig file

To configure user name to your git hub account
git config --global user.name "Suma"
To configure email to your git hub account
git config --global user.email "suma@gmail.com"
To manage line endings in all types in all types of operating system file
git config --global core.autocrlf true
git config --global core.autocrlf input  (Difference between input and true ???)

To intialize the project , in the project directory
git init
Outside the project
git init my_project

To see are there any changes that are done to files or any new files added
git status

To keep the files in the staging. Every file that needs a commit has to first go to staging.
git add my_file.txt

To commit a file. Text in double quotes is the comment given for the commit
git commit -m "File changed" my_file.txt

If you dont give the comment and just uses below command, git will open a text file to enter the comments
git commit

To see what changes you have done to the file before staging. This will show the entire line in red color even if single word has changed in the line
git diff

To see excatly the words which are changed
git diff --color-words

To know excactly what changes happened to words like word changed/removed or added
git diff --word-diff

To know the changes to the files whether they were added/removed/modified
git diff --stat

To know the changes in the staging area to most recent commit in the history
git diff --staged

To compare the changes between branches and changes between earlier commits 
git diff HEAD







